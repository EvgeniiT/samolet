{"version":3,"sources":["components/Filter.js","pages/home.js","pages/detailPage.js","app.js","api.js","serviceWorker.js","index.js"],"names":["Filter","handleFilterChange","useState","searchText","setSearchText","type","placeholder","value","onChange","e","target","Home","data","tableData","setTableData","useEffect","history","useHistory","filteredData","list","length","filter","el","territory","toLowerCase","includes","search","className","columns","title","dataIndex","sorter","a","b","libraries","dataSource","pagination","rowKey","onRow","record","onClick","push","order","DATA_NAMES","address","computers","employees","fullname","staff_higheeducated","DetailPage","id","useParams","parseInt","regionData","Object","entries","key","name","console","log","App","setData","fetch","then","response","json","res","style","minHeight","Header","theme","mode","selectedKeys","Item","lineHeight","to","Content","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","locale","ruRU","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAceA,EAXA,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,mBAAwB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAMvC,OACE,kBAAC,IAAD,CAAOC,KAAK,OAAOC,YAAY,iCAAQC,MAAOJ,EAAYK,SALvC,SAAAC,GACnBL,EAAcK,EAAEC,OAAOH,OACvBN,EAAmBQ,EAAEC,OAAOH,WCkDjBI,EApDF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EACWV,mBAAS,IADpB,mBAChBW,EADgB,KACLC,EADK,OAEaZ,mBAAS,IAFtB,mBAEhBC,EAFgB,KAEJC,EAFI,KAIvBW,qBAAU,kBAAMD,EAAaF,KAAO,CAACA,IAErC,IAYMI,EAAUC,cAWVC,EATS,SAACC,EAAMhB,GACpB,OAA0B,IAAtBA,EAAWiB,OACND,EAEFA,EAAKE,QAAO,SAAAC,GACjB,OAAOA,EAAGC,UAAUC,cAAcC,SAAStB,EAAWqB,kBAIrCE,CAAOb,EAAWV,GAMvC,OACE,yBAAKwB,UAAU,eACb,4PACA,yBAAKA,UAAU,uBACb,kBAAC,EAAD,CAAQA,UAAU,sBAAsB1B,mBARnB,SAACE,GAC1BC,EAAcD,OASV,kBAAC,IAAD,CACEyB,QApCQ,CACd,CACEC,MAAO,uCACPC,UAAW,aAEb,CACED,MAAO,sHACPC,UAAW,YACXC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,UAAYD,EAAEC,aA6B9BC,WAAYjB,EACZkB,YAAY,EACZC,OAAO,QACPC,MAAO,SAACC,GAAD,MAAa,CAAEC,QAAS,kBAAMxB,EAAQyB,KAAR,mBAAyBF,EAAOG,eC9CzEC,EAAa,CACjBD,MAAO,4EACPE,QAAS,iCACTC,UAAW,qGACXC,UAAW,+FACXC,SAAU,wFACVb,UAAW,yFACXc,oBAAqB,qNA2CRC,EAxCI,SAAC,GASlB,IATmC,IAAD,IAAfrC,YAAe,MAAR,GAAQ,EAE1BsC,EAAOC,cAAPD,GAF0B,EAIRtC,EAAKS,QAAO,SAAAC,GAAE,OAAIA,EAAGoB,QAAUU,SAASF,EAAI,OAJpC,sBAI3BG,OAJ2B,MAId,GAJc,EAM5BxC,EAAY,GAGlB,MADgByC,OAAOC,QAAQF,GAC/B,eAAoC,CAAC,IAAD,sBAAxBG,EAAwB,KAAnBjD,EAAmB,KAC9BoC,EAAWa,IACb3C,EAAU4B,KAAK,CAACgB,KAAMd,EAAWa,GAAMjD,UAI3CmD,QAAQC,IAAI,MAAO9C,GAanB,OACE,yBAAKc,UAAU,gBACb,kBAAC,IAAD,CACEC,QAdU,CACd,CACEC,MAAO,mDACPC,UAAW,QAEb,CACED,MAAO,mDACPC,UAAW,UAQTK,WAAYtB,EACZuB,YAAY,EACZC,OAAO,S,yBCzCA,SAASuB,IAAO,IAAD,EACJ1D,mBAAS,IADL,mBACrBU,EADqB,KACfiD,EADe,KAO5B,OAJA9C,qBAAU,WCVH+C,MAAM,gGACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDUjBF,MAAK,SAACG,GAAD,OAASL,EAAQK,QAC/B,IAGD,kBAAC,IAAD,CAAQC,MAAO,CAACC,UAAU,UACxB,kBAAC,IAAOC,OAAR,KACE,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,aAAa,QAChD,kBAAC,IAAKC,KAAN,CAAWjB,IAAI,IAAIW,MAAO,CAACO,WAAY,SAAS,kBAAC,IAAD,CAAMC,GAAG,YAAT,qCAGpD,kBAAC,IAAOC,QAAR,CAAgBjD,UAAU,eACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,YAChB,kBAAC,EAAD,CAAMlE,KAAMA,KAEd,kBAAC,IAAD,CAAOkE,KAAK,gBACV,kBAAC,EAAD,CAAYlE,KAAMA,QEhBVmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,OCPnCC,IAASC,OACP,kBAAC,IAAD,CAAgBC,OAAQC,KACtB,kBAAC,IAAD,KACE,kBAAC3B,EAAD,QAGJ4B,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.2b267237.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {Input} from 'antd';\r\n\r\nconst Filter = ({handleFilterChange}) => {\r\n  const [searchText, setSearchText] = useState('');\r\n  const handleChange = e => {\r\n    setSearchText(e.target.value);\r\n    handleFilterChange(e.target.value);\r\n  };\r\n  return (\r\n    <Input type=\"text\" placeholder=\"Поиск\" value={searchText} onChange={handleChange} />\r\n  )\r\n}\r\n\r\nexport default Filter;","import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'antd';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Filter from '../components/Filter';\r\n\r\nconst Home = ({data}) => {\r\n  const [tableData, setTableData] = useState([]);\r\n  const [searchText, setSearchText] = useState('');\r\n\r\n  useEffect(() => setTableData(data), [data]);\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Регион',\r\n      dataIndex: 'territory',\r\n    },\r\n    {\r\n      title: 'Количество библиотек',\r\n      dataIndex: 'libraries',\r\n      sorter: (a, b) => a.libraries - b.libraries,\r\n    },\r\n  ]\r\n  \r\n  const history = useHistory();\r\n\r\n  const search = (list, searchText) => {\r\n    if (searchText.length === 0) {\r\n      return list;\r\n    }\r\n    return list.filter(el => {\r\n      return el.territory.toLowerCase().includes(searchText.toLowerCase());\r\n    });\r\n  }\r\n\r\n  const filteredData = search(tableData, searchText);\r\n\r\n  const handleFilterChange = (searchText) => {\r\n    setSearchText(searchText);\r\n  }\r\n\r\n  return (\r\n    <div className=\"regionsList\">\r\n      <h1>Таблица количества библиотек по регионам</h1>\r\n      <div className=\"regionsList__filter\">\r\n        <Filter className=\"regionsList__filter\" handleFilterChange={handleFilterChange} />\r\n      </div>\r\n        <Table \r\n          columns={columns}\r\n          dataSource={filteredData}\r\n          pagination={false}\r\n          rowKey=\"order\"\r\n          onRow={(record) => ({ onClick: () => history.push(`/subject/${record.order}`)})}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nconst DATA_NAMES = {\r\n  order: 'Номер региона',\r\n  address: 'Адрес',\r\n  computers: 'Кол-во компьютеров',\r\n  employees: 'Кол-во работников',\r\n  fullname: 'Полное название',\r\n  libraries: 'Кол-во библиотек',\r\n  staff_higheeducated: 'Кол-во работников с высшим образованием'\r\n}\r\n\r\nconst DetailPage = ({data = []}) => {\r\n  \r\n  const { id } = useParams();\r\n  \r\n  const [regionData = {}] = data.filter(el => el.order === parseInt(id, 10));\r\n\r\n  const tableData = [];\r\n\r\n  const entries = Object.entries(regionData);\r\n  for (const [key, value] of entries) {\r\n    if (DATA_NAMES[key]) {\r\n      tableData.push({name: DATA_NAMES[key], value})\r\n    }\r\n  };\r\n\r\n  console.log('&&&', tableData);\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Название',\r\n      dataIndex: 'name',\r\n    },\r\n    {\r\n      title: 'Значение',\r\n      dataIndex: 'value',\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <div className=\"regionDetail\">\r\n      <Table \r\n        columns={columns}\r\n        dataSource={tableData}\r\n        pagination={false}\r\n        rowKey=\"id\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DetailPage;","import React, { useEffect, useState } from 'react';\r\nimport Home from './pages/home';\r\nimport DetailPage from './pages/detailPage';\r\nimport { Layout, Menu } from 'antd';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport './app.css';\r\nimport { getData } from \"./api\";\r\n\r\nexport default function App() {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData().then((res) => setData(res));\r\n  }, []);\r\n\r\n  return (\r\n    <Layout style={{minHeight:\"100vh\"}}>\r\n      <Layout.Header>\r\n        <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys=\"none\">\r\n          <Menu.Item key=\"1\" style={{lineHeight: \"64px\"}}><Link to='/samolet'>Домой</Link></Menu.Item>\r\n        </Menu>\r\n      </Layout.Header>\r\n      <Layout.Content className=\"mainContent\">\r\n        <Switch>\r\n          <Route exact path='/samolet'>\r\n            <Home data={data}/>\r\n          </Route>\r\n          <Route path='/subject/:id'>\r\n            <DetailPage data={data}/>\r\n          </Route>\r\n        </Switch>\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n}\r\n","export function getData() {\r\n  return fetch('opendata/7705851331-stat_library/data-2016-11-10T00-00-00-structure-2016-09-12T00-00-00.json')\r\n    .then(response => response.json());\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ConfigProvider } from 'antd';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport ruRU from 'antd/lib/locale-provider/ru_RU';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nReactDOM.render(\r\n  <ConfigProvider locale={ruRU}>\r\n    <BrowserRouter >\r\n      <App />\r\n    </BrowserRouter>\r\n  </ConfigProvider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}